/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DROPSY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_MASTER_DISCRIMINATOR = new Uint8Array([
  206, 91, 246, 30, 216, 101, 134, 166,
]);

export function getInitializeMasterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_MASTER_DISCRIMINATOR
  );
}

export type InitializeMasterInstruction<
  TProgram extends string = typeof DROPSY_PROGRAM_ADDRESS,
  TAccountMaster extends string | IAccountMeta<string> = string,
  TAccountStats extends string | IAccountMeta<string> = string,
  TAccountFeeVault extends
    | string
    | IAccountMeta<string> = 'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV',
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMaster extends string
        ? WritableAccount<TAccountMaster>
        : TAccountMaster,
      TAccountStats extends string
        ? WritableAccount<TAccountStats>
        : TAccountStats,
      TAccountFeeVault extends string
        ? ReadonlyAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeMasterInstructionData = {
  discriminator: ReadonlyUint8Array;
  protocolFee: bigint;
  initControllerFee: bigint;
  withdrawFee: bigint;
};

export type InitializeMasterInstructionDataArgs = {
  protocolFee: number | bigint;
  initControllerFee: number | bigint;
  withdrawFee: number | bigint;
};

export function getInitializeMasterInstructionDataEncoder(): Encoder<InitializeMasterInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['protocolFee', getU64Encoder()],
      ['initControllerFee', getU64Encoder()],
      ['withdrawFee', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_MASTER_DISCRIMINATOR })
  );
}

export function getInitializeMasterInstructionDataDecoder(): Decoder<InitializeMasterInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['protocolFee', getU64Decoder()],
    ['initControllerFee', getU64Decoder()],
    ['withdrawFee', getU64Decoder()],
  ]);
}

export function getInitializeMasterInstructionDataCodec(): Codec<
  InitializeMasterInstructionDataArgs,
  InitializeMasterInstructionData
> {
  return combineCodec(
    getInitializeMasterInstructionDataEncoder(),
    getInitializeMasterInstructionDataDecoder()
  );
}

export type InitializeMasterAsyncInput<
  TAccountMaster extends string = string,
  TAccountStats extends string = string,
  TAccountFeeVault extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  master?: Address<TAccountMaster>;
  stats?: Address<TAccountStats>;
  feeVault?: Address<TAccountFeeVault>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  protocolFee: InitializeMasterInstructionDataArgs['protocolFee'];
  initControllerFee: InitializeMasterInstructionDataArgs['initControllerFee'];
  withdrawFee: InitializeMasterInstructionDataArgs['withdrawFee'];
};

export async function getInitializeMasterInstructionAsync<
  TAccountMaster extends string,
  TAccountStats extends string,
  TAccountFeeVault extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DROPSY_PROGRAM_ADDRESS,
>(
  input: InitializeMasterAsyncInput<
    TAccountMaster,
    TAccountStats,
    TAccountFeeVault,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeMasterInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountStats,
    TAccountFeeVault,
    TAccountAuthority,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? DROPSY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    master: { value: input.master ?? null, isWritable: true },
    stats: { value: input.stats ?? null, isWritable: true },
    feeVault: { value: input.feeVault ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.master.value) {
    accounts.master.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 97, 115, 116, 101, 114, 51])
        ),
      ],
    });
  }
  if (!accounts.stats.value) {
    accounts.stats.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([115, 116, 97, 116, 115])),
      ],
    });
  }
  if (!accounts.feeVault.value) {
    accounts.feeVault.value =
      'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV' as Address<'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.master),
      getAccountMeta(accounts.stats),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeMasterInstructionDataEncoder().encode(
      args as InitializeMasterInstructionDataArgs
    ),
  } as InitializeMasterInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountStats,
    TAccountFeeVault,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeMasterInput<
  TAccountMaster extends string = string,
  TAccountStats extends string = string,
  TAccountFeeVault extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  master: Address<TAccountMaster>;
  stats: Address<TAccountStats>;
  feeVault?: Address<TAccountFeeVault>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  protocolFee: InitializeMasterInstructionDataArgs['protocolFee'];
  initControllerFee: InitializeMasterInstructionDataArgs['initControllerFee'];
  withdrawFee: InitializeMasterInstructionDataArgs['withdrawFee'];
};

export function getInitializeMasterInstruction<
  TAccountMaster extends string,
  TAccountStats extends string,
  TAccountFeeVault extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DROPSY_PROGRAM_ADDRESS,
>(
  input: InitializeMasterInput<
    TAccountMaster,
    TAccountStats,
    TAccountFeeVault,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeMasterInstruction<
  TProgramAddress,
  TAccountMaster,
  TAccountStats,
  TAccountFeeVault,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? DROPSY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    master: { value: input.master ?? null, isWritable: true },
    stats: { value: input.stats ?? null, isWritable: true },
    feeVault: { value: input.feeVault ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.feeVault.value) {
    accounts.feeVault.value =
      'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV' as Address<'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.master),
      getAccountMeta(accounts.stats),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeMasterInstructionDataEncoder().encode(
      args as InitializeMasterInstructionDataArgs
    ),
  } as InitializeMasterInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountStats,
    TAccountFeeVault,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeMasterInstruction<
  TProgram extends string = typeof DROPSY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    master: TAccountMetas[0];
    stats: TAccountMetas[1];
    feeVault: TAccountMetas[2];
    authority: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializeMasterInstructionData;
};

export function parseInitializeMasterInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeMasterInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      master: getNextAccount(),
      stats: getNextAccount(),
      feeVault: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeMasterInstructionDataDecoder().decode(instruction.data),
  };
}
