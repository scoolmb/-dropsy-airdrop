/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DROPSY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_BITMAP_DISCRIMINATOR = new Uint8Array([
  59, 123, 115, 204, 163, 227, 37, 118,
]);

export function getCloseBitmapDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_BITMAP_DISCRIMINATOR
  );
}

export type CloseBitmapInstruction<
  TProgram extends string = typeof DROPSY_PROGRAM_ADDRESS,
  TAccountAirdrop extends string | IAccountMeta<string> = string,
  TAccountBitmap extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAirdrop extends string
        ? WritableAccount<TAccountAirdrop>
        : TAccountAirdrop,
      TAccountBitmap extends string
        ? WritableAccount<TAccountBitmap>
        : TAccountBitmap,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      ...TRemainingAccounts,
    ]
  >;

export type CloseBitmapInstructionData = { discriminator: ReadonlyUint8Array };

export type CloseBitmapInstructionDataArgs = {};

export function getCloseBitmapInstructionDataEncoder(): Encoder<CloseBitmapInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_BITMAP_DISCRIMINATOR })
  );
}

export function getCloseBitmapInstructionDataDecoder(): Decoder<CloseBitmapInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseBitmapInstructionDataCodec(): Codec<
  CloseBitmapInstructionDataArgs,
  CloseBitmapInstructionData
> {
  return combineCodec(
    getCloseBitmapInstructionDataEncoder(),
    getCloseBitmapInstructionDataDecoder()
  );
}

export type CloseBitmapInput<
  TAccountAirdrop extends string = string,
  TAccountBitmap extends string = string,
  TAccountOwner extends string = string,
> = {
  airdrop: Address<TAccountAirdrop>;
  bitmap: Address<TAccountBitmap>;
  owner: TransactionSigner<TAccountOwner>;
};

export function getCloseBitmapInstruction<
  TAccountAirdrop extends string,
  TAccountBitmap extends string,
  TAccountOwner extends string,
  TProgramAddress extends Address = typeof DROPSY_PROGRAM_ADDRESS,
>(
  input: CloseBitmapInput<TAccountAirdrop, TAccountBitmap, TAccountOwner>,
  config?: { programAddress?: TProgramAddress }
): CloseBitmapInstruction<
  TProgramAddress,
  TAccountAirdrop,
  TAccountBitmap,
  TAccountOwner
> {
  // Program address.
  const programAddress = config?.programAddress ?? DROPSY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    airdrop: { value: input.airdrop ?? null, isWritable: true },
    bitmap: { value: input.bitmap ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.airdrop),
      getAccountMeta(accounts.bitmap),
      getAccountMeta(accounts.owner),
    ],
    programAddress,
    data: getCloseBitmapInstructionDataEncoder().encode({}),
  } as CloseBitmapInstruction<
    TProgramAddress,
    TAccountAirdrop,
    TAccountBitmap,
    TAccountOwner
  >;

  return instruction;
}

export type ParsedCloseBitmapInstruction<
  TProgram extends string = typeof DROPSY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    airdrop: TAccountMetas[0];
    bitmap: TAccountMetas[1];
    owner: TAccountMetas[2];
  };
  data: CloseBitmapInstructionData;
};

export function parseCloseBitmapInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseBitmapInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      airdrop: getNextAccount(),
      bitmap: getNextAccount(),
      owner: getNextAccount(),
    },
    data: getCloseBitmapInstructionDataDecoder().decode(instruction.data),
  };
}
