/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DROPSY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_CONTROLLER_DISCRIMINATOR = new Uint8Array([
  137, 255, 100, 190, 201, 247, 241, 81,
]);

export function getInitializeControllerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_CONTROLLER_DISCRIMINATOR
  );
}

export type InitializeControllerInstruction<
  TProgram extends string = typeof DROPSY_PROGRAM_ADDRESS,
  TAccountController extends string | IAccountMeta<string> = string,
  TAccountFeeVault extends string | IAccountMeta<string> = string,
  TAccountTreasury extends
    | string
    | IAccountMeta<string> = 'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV',
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountController extends string
        ? WritableAccount<TAccountController>
        : TAccountController,
      TAccountFeeVault extends string
        ? ReadonlyAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeControllerInstructionData = {
  discriminator: ReadonlyUint8Array;
  createFee: bigint;
  claimFee: bigint;
};

export type InitializeControllerInstructionDataArgs = {
  createFee: number | bigint;
  claimFee: number | bigint;
};

export function getInitializeControllerInstructionDataEncoder(): Encoder<InitializeControllerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['createFee', getU64Encoder()],
      ['claimFee', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_CONTROLLER_DISCRIMINATOR,
    })
  );
}

export function getInitializeControllerInstructionDataDecoder(): Decoder<InitializeControllerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['createFee', getU64Decoder()],
    ['claimFee', getU64Decoder()],
  ]);
}

export function getInitializeControllerInstructionDataCodec(): Codec<
  InitializeControllerInstructionDataArgs,
  InitializeControllerInstructionData
> {
  return combineCodec(
    getInitializeControllerInstructionDataEncoder(),
    getInitializeControllerInstructionDataDecoder()
  );
}

export type InitializeControllerAsyncInput<
  TAccountController extends string = string,
  TAccountFeeVault extends string = string,
  TAccountTreasury extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  controller?: Address<TAccountController>;
  feeVault: Address<TAccountFeeVault>;
  treasury?: Address<TAccountTreasury>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  createFee: InitializeControllerInstructionDataArgs['createFee'];
  claimFee: InitializeControllerInstructionDataArgs['claimFee'];
};

export async function getInitializeControllerInstructionAsync<
  TAccountController extends string,
  TAccountFeeVault extends string,
  TAccountTreasury extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DROPSY_PROGRAM_ADDRESS,
>(
  input: InitializeControllerAsyncInput<
    TAccountController,
    TAccountFeeVault,
    TAccountTreasury,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeControllerInstruction<
    TProgramAddress,
    TAccountController,
    TAccountFeeVault,
    TAccountTreasury,
    TAccountPayer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? DROPSY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    controller: { value: input.controller ?? null, isWritable: true },
    feeVault: { value: input.feeVault ?? null, isWritable: false },
    treasury: { value: input.treasury ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.controller.value) {
    accounts.controller.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 111, 110, 116, 114, 111, 108, 108, 101, 114, 45, 100, 114, 111,
            112, 115, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.payer.value)),
      ],
    });
  }
  if (!accounts.treasury.value) {
    accounts.treasury.value =
      'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV' as Address<'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeControllerInstructionDataEncoder().encode(
      args as InitializeControllerInstructionDataArgs
    ),
  } as InitializeControllerInstruction<
    TProgramAddress,
    TAccountController,
    TAccountFeeVault,
    TAccountTreasury,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeControllerInput<
  TAccountController extends string = string,
  TAccountFeeVault extends string = string,
  TAccountTreasury extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  controller: Address<TAccountController>;
  feeVault: Address<TAccountFeeVault>;
  treasury?: Address<TAccountTreasury>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  createFee: InitializeControllerInstructionDataArgs['createFee'];
  claimFee: InitializeControllerInstructionDataArgs['claimFee'];
};

export function getInitializeControllerInstruction<
  TAccountController extends string,
  TAccountFeeVault extends string,
  TAccountTreasury extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DROPSY_PROGRAM_ADDRESS,
>(
  input: InitializeControllerInput<
    TAccountController,
    TAccountFeeVault,
    TAccountTreasury,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeControllerInstruction<
  TProgramAddress,
  TAccountController,
  TAccountFeeVault,
  TAccountTreasury,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? DROPSY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    controller: { value: input.controller ?? null, isWritable: true },
    feeVault: { value: input.feeVault ?? null, isWritable: false },
    treasury: { value: input.treasury ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treasury.value) {
    accounts.treasury.value =
      'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV' as Address<'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeControllerInstructionDataEncoder().encode(
      args as InitializeControllerInstructionDataArgs
    ),
  } as InitializeControllerInstruction<
    TProgramAddress,
    TAccountController,
    TAccountFeeVault,
    TAccountTreasury,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeControllerInstruction<
  TProgram extends string = typeof DROPSY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    controller: TAccountMetas[0];
    feeVault: TAccountMetas[1];
    treasury: TAccountMetas[2];
    payer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializeControllerInstructionData;
};

export function parseInitializeControllerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeControllerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      controller: getNextAccount(),
      feeVault: getNextAccount(),
      treasury: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeControllerInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
