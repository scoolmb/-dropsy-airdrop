/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DROPSY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLAIM_TOKENS_DISCRIMINATOR = new Uint8Array([
  108, 216, 210, 231, 0, 212, 42, 64,
]);

export function getClaimTokensDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_TOKENS_DISCRIMINATOR
  );
}

export type ClaimTokensInstruction<
  TProgram extends string = typeof DROPSY_PROGRAM_ADDRESS,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountDestinationTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountAirdrop extends string | IAccountMeta<string> = string,
  TAccountBitmap extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountFeeVault extends string | IAccountMeta<string> = string,
  TAccountController extends string | IAccountMeta<string> = string,
  TAccountClaimer extends string | IAccountMeta<string> = string,
  TAccountTreasury extends
    | string
    | IAccountMeta<string> = 'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountDestinationTokenAccount extends string
        ? WritableAccount<TAccountDestinationTokenAccount>
        : TAccountDestinationTokenAccount,
      TAccountAirdrop extends string
        ? ReadonlyAccount<TAccountAirdrop>
        : TAccountAirdrop,
      TAccountBitmap extends string
        ? WritableAccount<TAccountBitmap>
        : TAccountBitmap,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountFeeVault extends string
        ? WritableAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountClaimer extends string
        ? WritableSignerAccount<TAccountClaimer> &
            IAccountSignerMeta<TAccountClaimer>
        : TAccountClaimer,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimTokensInstructionData = {
  discriminator: ReadonlyUint8Array;
  index: bigint;
  proof: Array<Array<number>>;
  amount: bigint;
};

export type ClaimTokensInstructionDataArgs = {
  index: number | bigint;
  proof: Array<Array<number>>;
  amount: number | bigint;
};

export function getClaimTokensInstructionDataEncoder(): Encoder<ClaimTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['index', getU64Encoder()],
      ['proof', getArrayEncoder(getArrayEncoder(getU8Encoder(), { size: 32 }))],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_TOKENS_DISCRIMINATOR })
  );
}

export function getClaimTokensInstructionDataDecoder(): Decoder<ClaimTokensInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['index', getU64Decoder()],
    ['proof', getArrayDecoder(getArrayDecoder(getU8Decoder(), { size: 32 }))],
    ['amount', getU64Decoder()],
  ]);
}

export function getClaimTokensInstructionDataCodec(): Codec<
  ClaimTokensInstructionDataArgs,
  ClaimTokensInstructionData
> {
  return combineCodec(
    getClaimTokensInstructionDataEncoder(),
    getClaimTokensInstructionDataDecoder()
  );
}

export type ClaimTokensInput<
  TAccountVault extends string = string,
  TAccountDestinationTokenAccount extends string = string,
  TAccountAirdrop extends string = string,
  TAccountBitmap extends string = string,
  TAccountMint extends string = string,
  TAccountFeeVault extends string = string,
  TAccountController extends string = string,
  TAccountClaimer extends string = string,
  TAccountTreasury extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  vault: Address<TAccountVault>;
  destinationTokenAccount: Address<TAccountDestinationTokenAccount>;
  airdrop: Address<TAccountAirdrop>;
  bitmap: Address<TAccountBitmap>;
  mint: Address<TAccountMint>;
  feeVault: Address<TAccountFeeVault>;
  controller: Address<TAccountController>;
  claimer: TransactionSigner<TAccountClaimer>;
  treasury?: Address<TAccountTreasury>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  index: ClaimTokensInstructionDataArgs['index'];
  proof: ClaimTokensInstructionDataArgs['proof'];
  amount: ClaimTokensInstructionDataArgs['amount'];
};

export function getClaimTokensInstruction<
  TAccountVault extends string,
  TAccountDestinationTokenAccount extends string,
  TAccountAirdrop extends string,
  TAccountBitmap extends string,
  TAccountMint extends string,
  TAccountFeeVault extends string,
  TAccountController extends string,
  TAccountClaimer extends string,
  TAccountTreasury extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DROPSY_PROGRAM_ADDRESS,
>(
  input: ClaimTokensInput<
    TAccountVault,
    TAccountDestinationTokenAccount,
    TAccountAirdrop,
    TAccountBitmap,
    TAccountMint,
    TAccountFeeVault,
    TAccountController,
    TAccountClaimer,
    TAccountTreasury,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimTokensInstruction<
  TProgramAddress,
  TAccountVault,
  TAccountDestinationTokenAccount,
  TAccountAirdrop,
  TAccountBitmap,
  TAccountMint,
  TAccountFeeVault,
  TAccountController,
  TAccountClaimer,
  TAccountTreasury,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? DROPSY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vault: { value: input.vault ?? null, isWritable: true },
    destinationTokenAccount: {
      value: input.destinationTokenAccount ?? null,
      isWritable: true,
    },
    airdrop: { value: input.airdrop ?? null, isWritable: false },
    bitmap: { value: input.bitmap ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    feeVault: { value: input.feeVault ?? null, isWritable: true },
    controller: { value: input.controller ?? null, isWritable: false },
    claimer: { value: input.claimer ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treasury.value) {
    accounts.treasury.value =
      'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV' as Address<'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.destinationTokenAccount),
      getAccountMeta(accounts.airdrop),
      getAccountMeta(accounts.bitmap),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.claimer),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimTokensInstructionDataEncoder().encode(
      args as ClaimTokensInstructionDataArgs
    ),
  } as ClaimTokensInstruction<
    TProgramAddress,
    TAccountVault,
    TAccountDestinationTokenAccount,
    TAccountAirdrop,
    TAccountBitmap,
    TAccountMint,
    TAccountFeeVault,
    TAccountController,
    TAccountClaimer,
    TAccountTreasury,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedClaimTokensInstruction<
  TProgram extends string = typeof DROPSY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    vault: TAccountMetas[0];
    destinationTokenAccount: TAccountMetas[1];
    airdrop: TAccountMetas[2];
    bitmap: TAccountMetas[3];
    mint: TAccountMetas[4];
    feeVault: TAccountMetas[5];
    controller: TAccountMetas[6];
    claimer: TAccountMetas[7];
    treasury: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
  };
  data: ClaimTokensInstructionData;
};

export function parseClaimTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vault: getNextAccount(),
      destinationTokenAccount: getNextAccount(),
      airdrop: getNextAccount(),
      bitmap: getNextAccount(),
      mint: getNextAccount(),
      feeVault: getNextAccount(),
      controller: getNextAccount(),
      claimer: getNextAccount(),
      treasury: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClaimTokensInstructionDataDecoder().decode(instruction.data),
  };
}
