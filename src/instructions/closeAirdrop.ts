/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { DROPSY_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const CLOSE_AIRDROP_DISCRIMINATOR = new Uint8Array([
  85, 138, 99, 129, 104, 203, 94, 4,
]);

export function getCloseAirdropDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_AIRDROP_DISCRIMINATOR
  );
}

export type CloseAirdropInstruction<
  TProgram extends string = typeof DROPSY_PROGRAM_ADDRESS,
  TAccountAirdrop extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountDestinationTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAirdrop extends string
        ? WritableAccount<TAccountAirdrop>
        : TAccountAirdrop,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountDestinationTokenAccount extends string
        ? WritableAccount<TAccountDestinationTokenAccount>
        : TAccountDestinationTokenAccount,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts
    ]
  >;

export type CloseAirdropInstructionData = { discriminator: ReadonlyUint8Array };

export type CloseAirdropInstructionDataArgs = {};

export function getCloseAirdropInstructionDataEncoder(): Encoder<CloseAirdropInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_AIRDROP_DISCRIMINATOR })
  );
}

export function getCloseAirdropInstructionDataDecoder(): Decoder<CloseAirdropInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseAirdropInstructionDataCodec(): Codec<
  CloseAirdropInstructionDataArgs,
  CloseAirdropInstructionData
> {
  return combineCodec(
    getCloseAirdropInstructionDataEncoder(),
    getCloseAirdropInstructionDataDecoder()
  );
}

export type CloseAirdropInput<
  TAccountAirdrop extends string = string,
  TAccountVault extends string = string,
  TAccountDestinationTokenAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountMint extends string = string,
  TAccountTokenProgram extends string = string
> = {
  airdrop: Address<TAccountAirdrop>;
  vault: Address<TAccountVault>;
  destinationTokenAccount: Address<TAccountDestinationTokenAccount>;
  owner: TransactionSigner<TAccountOwner>;
  mint: Address<TAccountMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getCloseAirdropInstruction<
  TAccountAirdrop extends string,
  TAccountVault extends string,
  TAccountDestinationTokenAccount extends string,
  TAccountOwner extends string,
  TAccountMint extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof DROPSY_PROGRAM_ADDRESS
>(
  input: CloseAirdropInput<
    TAccountAirdrop,
    TAccountVault,
    TAccountDestinationTokenAccount,
    TAccountOwner,
    TAccountMint,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseAirdropInstruction<
  TProgramAddress,
  TAccountAirdrop,
  TAccountVault,
  TAccountDestinationTokenAccount,
  TAccountOwner,
  TAccountMint,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? DROPSY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    airdrop: { value: input.airdrop ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    destinationTokenAccount: {
      value: input.destinationTokenAccount ?? null,
      isWritable: true,
    },
    owner: { value: input.owner ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb" as Address<"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.airdrop),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.destinationTokenAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCloseAirdropInstructionDataEncoder().encode({}),
  } as CloseAirdropInstruction<
    TProgramAddress,
    TAccountAirdrop,
    TAccountVault,
    TAccountDestinationTokenAccount,
    TAccountOwner,
    TAccountMint,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedCloseAirdropInstruction<
  TProgram extends string = typeof DROPSY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    airdrop: TAccountMetas[0];
    vault: TAccountMetas[1];
    destinationTokenAccount: TAccountMetas[2];
    owner: TAccountMetas[3];
    mint: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
  };
  data: CloseAirdropInstructionData;
};

export function parseCloseAirdropInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseAirdropInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      airdrop: getNextAccount(),
      vault: getNextAccount(),
      destinationTokenAccount: getNextAccount(),
      owner: getNextAccount(),
      mint: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCloseAirdropInstructionDataDecoder().decode(instruction.data),
  };
}
