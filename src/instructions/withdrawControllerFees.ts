/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DROPSY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const WITHDRAW_CONTROLLER_FEES_DISCRIMINATOR = new Uint8Array([
  252, 199, 14, 46, 100, 156, 176, 230,
]);

export function getWithdrawControllerFeesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_CONTROLLER_FEES_DISCRIMINATOR
  );
}

export type WithdrawControllerFeesInstruction<
  TProgram extends string = typeof DROPSY_PROGRAM_ADDRESS,
  TAccountMaster extends string | IAccountMeta<string> = string,
  TAccountController extends string | IAccountMeta<string> = string,
  TAccountFeeVault extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTreasury extends
    | string
    | IAccountMeta<string> = 'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMaster extends string
        ? ReadonlyAccount<TAccountMaster>
        : TAccountMaster,
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountFeeVault extends string
        ? WritableAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawControllerFeesInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type WithdrawControllerFeesInstructionDataArgs = {
  amount: number | bigint;
};

export function getWithdrawControllerFeesInstructionDataEncoder(): Encoder<WithdrawControllerFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_CONTROLLER_FEES_DISCRIMINATOR,
    })
  );
}

export function getWithdrawControllerFeesInstructionDataDecoder(): Decoder<WithdrawControllerFeesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getWithdrawControllerFeesInstructionDataCodec(): Codec<
  WithdrawControllerFeesInstructionDataArgs,
  WithdrawControllerFeesInstructionData
> {
  return combineCodec(
    getWithdrawControllerFeesInstructionDataEncoder(),
    getWithdrawControllerFeesInstructionDataDecoder()
  );
}

export type WithdrawControllerFeesAsyncInput<
  TAccountMaster extends string = string,
  TAccountController extends string = string,
  TAccountFeeVault extends string = string,
  TAccountAuthority extends string = string,
  TAccountTreasury extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  master?: Address<TAccountMaster>;
  controller?: Address<TAccountController>;
  feeVault?: Address<TAccountFeeVault>;
  authority: TransactionSigner<TAccountAuthority>;
  treasury?: Address<TAccountTreasury>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: WithdrawControllerFeesInstructionDataArgs['amount'];
};

export async function getWithdrawControllerFeesInstructionAsync<
  TAccountMaster extends string,
  TAccountController extends string,
  TAccountFeeVault extends string,
  TAccountAuthority extends string,
  TAccountTreasury extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DROPSY_PROGRAM_ADDRESS,
>(
  input: WithdrawControllerFeesAsyncInput<
    TAccountMaster,
    TAccountController,
    TAccountFeeVault,
    TAccountAuthority,
    TAccountTreasury,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawControllerFeesInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountController,
    TAccountFeeVault,
    TAccountAuthority,
    TAccountTreasury,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? DROPSY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    master: { value: input.master ?? null, isWritable: false },
    controller: { value: input.controller ?? null, isWritable: false },
    feeVault: { value: input.feeVault ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.master.value) {
    accounts.master.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 97, 115, 116, 101, 114, 51])
        ),
      ],
    });
  }
  if (!accounts.controller.value) {
    accounts.controller.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 111, 110, 116, 114, 111, 108, 108, 101, 114, 45, 100, 114, 111,
            112, 115, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
      ],
    });
  }
  if (!accounts.feeVault.value) {
    accounts.feeVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.controller.value)),
      ],
    });
  }
  if (!accounts.treasury.value) {
    accounts.treasury.value =
      'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV' as Address<'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.master),
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawControllerFeesInstructionDataEncoder().encode(
      args as WithdrawControllerFeesInstructionDataArgs
    ),
  } as WithdrawControllerFeesInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountController,
    TAccountFeeVault,
    TAccountAuthority,
    TAccountTreasury,
    TAccountSystemProgram
  >;

  return instruction;
}

export type WithdrawControllerFeesInput<
  TAccountMaster extends string = string,
  TAccountController extends string = string,
  TAccountFeeVault extends string = string,
  TAccountAuthority extends string = string,
  TAccountTreasury extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  master: Address<TAccountMaster>;
  controller: Address<TAccountController>;
  feeVault: Address<TAccountFeeVault>;
  authority: TransactionSigner<TAccountAuthority>;
  treasury?: Address<TAccountTreasury>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: WithdrawControllerFeesInstructionDataArgs['amount'];
};

export function getWithdrawControllerFeesInstruction<
  TAccountMaster extends string,
  TAccountController extends string,
  TAccountFeeVault extends string,
  TAccountAuthority extends string,
  TAccountTreasury extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DROPSY_PROGRAM_ADDRESS,
>(
  input: WithdrawControllerFeesInput<
    TAccountMaster,
    TAccountController,
    TAccountFeeVault,
    TAccountAuthority,
    TAccountTreasury,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawControllerFeesInstruction<
  TProgramAddress,
  TAccountMaster,
  TAccountController,
  TAccountFeeVault,
  TAccountAuthority,
  TAccountTreasury,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? DROPSY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    master: { value: input.master ?? null, isWritable: false },
    controller: { value: input.controller ?? null, isWritable: false },
    feeVault: { value: input.feeVault ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treasury.value) {
    accounts.treasury.value =
      'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV' as Address<'DHffy4rNMtuL8VKgyBEay4jcq8AYHyoAzxLKU6aEijUV'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.master),
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawControllerFeesInstructionDataEncoder().encode(
      args as WithdrawControllerFeesInstructionDataArgs
    ),
  } as WithdrawControllerFeesInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountController,
    TAccountFeeVault,
    TAccountAuthority,
    TAccountTreasury,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedWithdrawControllerFeesInstruction<
  TProgram extends string = typeof DROPSY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    master: TAccountMetas[0];
    controller: TAccountMetas[1];
    feeVault: TAccountMetas[2];
    authority: TAccountMetas[3];
    treasury: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: WithdrawControllerFeesInstructionData;
};

export function parseWithdrawControllerFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawControllerFeesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      master: getNextAccount(),
      controller: getNextAccount(),
      feeVault: getNextAccount(),
      authority: getNextAccount(),
      treasury: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWithdrawControllerFeesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
