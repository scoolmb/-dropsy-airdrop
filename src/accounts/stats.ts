/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const STATS_DISCRIMINATOR = new Uint8Array([
  190, 125, 51, 63, 169, 197, 36, 238,
]);

export function getStatsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(STATS_DISCRIMINATOR);
}

export type Stats = {
  discriminator: ReadonlyUint8Array;
  /** initialized controllers // 8 */
  initializedControllers: bigint;
  /** initialized airdrops // 8 */
  initializedAirdrops: bigint;
  /** initialized claim_maps // 8 */
  initializedClaimMaps: bigint;
  /** closed airdrops */
  closedAirdrops: bigint;
  /** closed claim map */
  closedClaimMap: bigint;
  /** PDA bump seed */
  bump: number;
};

export type StatsArgs = {
  /** initialized controllers // 8 */
  initializedControllers: number | bigint;
  /** initialized airdrops // 8 */
  initializedAirdrops: number | bigint;
  /** initialized claim_maps // 8 */
  initializedClaimMaps: number | bigint;
  /** closed airdrops */
  closedAirdrops: number | bigint;
  /** closed claim map */
  closedClaimMap: number | bigint;
  /** PDA bump seed */
  bump: number;
};

export function getStatsEncoder(): Encoder<StatsArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['initializedControllers', getU64Encoder()],
      ['initializedAirdrops', getU64Encoder()],
      ['initializedClaimMaps', getU64Encoder()],
      ['closedAirdrops', getU64Encoder()],
      ['closedClaimMap', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STATS_DISCRIMINATOR })
  );
}

export function getStatsDecoder(): Decoder<Stats> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['initializedControllers', getU64Decoder()],
    ['initializedAirdrops', getU64Decoder()],
    ['initializedClaimMaps', getU64Decoder()],
    ['closedAirdrops', getU64Decoder()],
    ['closedClaimMap', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getStatsCodec(): Codec<StatsArgs, Stats> {
  return combineCodec(getStatsEncoder(), getStatsDecoder());
}

export function decodeStats<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Stats, TAddress>;
export function decodeStats<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Stats, TAddress>;
export function decodeStats<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Stats, TAddress> | MaybeAccount<Stats, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStatsDecoder()
  );
}

export async function fetchStats<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Stats, TAddress>> {
  const maybeAccount = await fetchMaybeStats(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStats<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Stats, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStats(maybeAccount);
}

export async function fetchAllStats(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Stats>[]> {
  const maybeAccounts = await fetchAllMaybeStats(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStats(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Stats>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeStats(maybeAccount));
}
