/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const AIRDROP_DISCRIMINATOR = new Uint8Array([
  31, 112, 159, 158, 124, 237, 9, 241,
]);

export function getAirdropDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(AIRDROP_DISCRIMINATOR);
}

export type Airdrop = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  mint: Address;
  controller: Address;
  supply: bigint;
  merkleRoot: Array<number>;
  startsAt: bigint;
  endsAt: bigint;
  bitmapCount: number;
  version: number;
  bump: number;
};

export type AirdropArgs = {
  authority: Address;
  mint: Address;
  controller: Address;
  supply: number | bigint;
  merkleRoot: Array<number>;
  startsAt: number | bigint;
  endsAt: number | bigint;
  bitmapCount: number;
  version: number;
  bump: number;
};

export function getAirdropEncoder(): Encoder<AirdropArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['mint', getAddressEncoder()],
      ['controller', getAddressEncoder()],
      ['supply', getU64Encoder()],
      ['merkleRoot', getArrayEncoder(getU8Encoder(), { size: 32 })],
      ['startsAt', getI64Encoder()],
      ['endsAt', getI64Encoder()],
      ['bitmapCount', getU8Encoder()],
      ['version', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: AIRDROP_DISCRIMINATOR })
  );
}

export function getAirdropDecoder(): Decoder<Airdrop> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['controller', getAddressDecoder()],
    ['supply', getU64Decoder()],
    ['merkleRoot', getArrayDecoder(getU8Decoder(), { size: 32 })],
    ['startsAt', getI64Decoder()],
    ['endsAt', getI64Decoder()],
    ['bitmapCount', getU8Decoder()],
    ['version', getU8Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getAirdropCodec(): Codec<AirdropArgs, Airdrop> {
  return combineCodec(getAirdropEncoder(), getAirdropDecoder());
}

export function decodeAirdrop<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Airdrop, TAddress>;
export function decodeAirdrop<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Airdrop, TAddress>;
export function decodeAirdrop<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Airdrop, TAddress> | MaybeAccount<Airdrop, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAirdropDecoder()
  );
}

export async function fetchAirdrop<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Airdrop, TAddress>> {
  const maybeAccount = await fetchMaybeAirdrop(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAirdrop<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Airdrop, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAirdrop(maybeAccount);
}

export async function fetchAllAirdrop(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Airdrop>[]> {
  const maybeAccounts = await fetchAllMaybeAirdrop(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAirdrop(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Airdrop>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAirdrop(maybeAccount));
}
