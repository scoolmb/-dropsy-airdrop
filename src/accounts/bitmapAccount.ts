/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const BITMAP_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  152, 161, 147, 85, 213, 38, 59, 48,
]);

export function getBitmapAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BITMAP_ACCOUNT_DISCRIMINATOR
  );
}

export type BitmapAccount = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  airdrop: Address;
  claimedBitmap: ReadonlyUint8Array;
  id: number;
  version: number;
  bump: number;
};

export type BitmapAccountArgs = {
  authority: Address;
  airdrop: Address;
  claimedBitmap: ReadonlyUint8Array;
  id: number;
  version: number;
  bump: number;
};

export function getBitmapAccountEncoder(): Encoder<BitmapAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['airdrop', getAddressEncoder()],
      [
        'claimedBitmap',
        addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()),
      ],
      ['id', getU8Encoder()],
      ['version', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BITMAP_ACCOUNT_DISCRIMINATOR })
  );
}

export function getBitmapAccountDecoder(): Decoder<BitmapAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['airdrop', getAddressDecoder()],
    ['claimedBitmap', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['id', getU8Decoder()],
    ['version', getU8Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getBitmapAccountCodec(): Codec<
  BitmapAccountArgs,
  BitmapAccount
> {
  return combineCodec(getBitmapAccountEncoder(), getBitmapAccountDecoder());
}

export function decodeBitmapAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<BitmapAccount, TAddress>;
export function decodeBitmapAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<BitmapAccount, TAddress>;
export function decodeBitmapAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<BitmapAccount, TAddress> | MaybeAccount<BitmapAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBitmapAccountDecoder()
  );
}

export async function fetchBitmapAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<BitmapAccount, TAddress>> {
  const maybeAccount = await fetchMaybeBitmapAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBitmapAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<BitmapAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBitmapAccount(maybeAccount);
}

export async function fetchAllBitmapAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<BitmapAccount>[]> {
  const maybeAccounts = await fetchAllMaybeBitmapAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBitmapAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<BitmapAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeBitmapAccount(maybeAccount));
}
