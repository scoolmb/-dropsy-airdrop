/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const CONTROLLER_DISCRIMINATOR = new Uint8Array([
  184, 79, 171, 0, 183, 43, 113, 110,
]);

export function getControllerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CONTROLLER_DISCRIMINATOR);
}

export type Controller = {
  discriminator: ReadonlyUint8Array;
  /** the controller authority    //  32 */
  authority: Address;
  /** Fee vault address derived from authority publicKey // 32 */
  feeVault: Address;
  /** Fee amount (in lamports) to create or close an airdrop using this controller //8 */
  feeLamports: bigint;
  /** version for a controller for upcoming upgrades // 1 */
  version: number;
  /** PDA bump seed  // 1 */
  bump: number;
  /** fee vault bump seed  // 1 */
  feeVaultBump: number;
};

export type ControllerArgs = {
  /** the controller authority    //  32 */
  authority: Address;
  /** Fee vault address derived from authority publicKey // 32 */
  feeVault: Address;
  /** Fee amount (in lamports) to create or close an airdrop using this controller //8 */
  feeLamports: number | bigint;
  /** version for a controller for upcoming upgrades // 1 */
  version: number;
  /** PDA bump seed  // 1 */
  bump: number;
  /** fee vault bump seed  // 1 */
  feeVaultBump: number;
};

export function getControllerEncoder(): Encoder<ControllerArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['feeVault', getAddressEncoder()],
      ['feeLamports', getU64Encoder()],
      ['version', getU8Encoder()],
      ['bump', getU8Encoder()],
      ['feeVaultBump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CONTROLLER_DISCRIMINATOR })
  );
}

export function getControllerDecoder(): Decoder<Controller> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['feeVault', getAddressDecoder()],
    ['feeLamports', getU64Decoder()],
    ['version', getU8Decoder()],
    ['bump', getU8Decoder()],
    ['feeVaultBump', getU8Decoder()],
  ]);
}

export function getControllerCodec(): Codec<ControllerArgs, Controller> {
  return combineCodec(getControllerEncoder(), getControllerDecoder());
}

export function decodeController<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Controller, TAddress>;
export function decodeController<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Controller, TAddress>;
export function decodeController<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Controller, TAddress> | MaybeAccount<Controller, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getControllerDecoder()
  );
}

export async function fetchController<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Controller, TAddress>> {
  const maybeAccount = await fetchMaybeController(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeController<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Controller, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeController(maybeAccount);
}

export async function fetchAllController(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Controller>[]> {
  const maybeAccounts = await fetchAllMaybeController(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeController(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Controller>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeController(maybeAccount));
}
