/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { DROPSY_PROGRAM_ADDRESS } from '../programs';

/** AirdropNotStarted: Airdrop has not started yet */
export const DROPSY_ERROR__AIRDROP_NOT_STARTED = 0x17d4; // 6100
/** AirdropEnded: Airdrop has already ended */
export const DROPSY_ERROR__AIRDROP_ENDED = 0x17d5; // 6101
/** AirdropNotEnded: Airdrop not yet ended */
export const DROPSY_ERROR__AIRDROP_NOT_ENDED = 0x17d6; // 6102
/** DurationTooShort: Airdrop duration must be at least 24 hours */
export const DROPSY_ERROR__DURATION_TOO_SHORT = 0x17d7; // 6103
/** InvalidEndTime: Airdrop must end at least 24 hours in the future */
export const DROPSY_ERROR__INVALID_END_TIME = 0x17d8; // 6104
/** InvalidOwner: Transaction sender is not the owner */
export const DROPSY_ERROR__INVALID_OWNER = 0x1838; // 6200
/** OwnerMismatch: Airdrop owner mismatch */
export const DROPSY_ERROR__OWNER_MISMATCH = 0x1839; // 6201
/** InvalidVaultAuthority: Invalid vault authority */
export const DROPSY_ERROR__INVALID_VAULT_AUTHORITY = 0x183a; // 6202
/** InvalidDestinationOwner: Destination account owner is not the signer */
export const DROPSY_ERROR__INVALID_DESTINATION_OWNER = 0x183b; // 6203
/** ControllerMismatch: Mismatched controller */
export const DROPSY_ERROR__CONTROLLER_MISMATCH = 0x183c; // 6204
/** InvalidMint: Mint does not match stored state */
export const DROPSY_ERROR__INVALID_MINT = 0x189c; // 6300
/** MintMismatch: Provided mint doesn't match airdrop's mint */
export const DROPSY_ERROR__MINT_MISMATCH = 0x189d; // 6301
/** VaultMintMismatch: Vault mint doesn't match airdrop mint */
export const DROPSY_ERROR__VAULT_MINT_MISMATCH = 0x189e; // 6302
/** DestinationMintMismatch: Destination mint doesn't match */
export const DROPSY_ERROR__DESTINATION_MINT_MISMATCH = 0x189f; // 6303
/** MintIsFrozen: Mint is frozen */
export const DROPSY_ERROR__MINT_IS_FROZEN = 0x18a0; // 6304
/** InvalidMintOwner: Invalid token program owner */
export const DROPSY_ERROR__INVALID_MINT_OWNER = 0x18a1; // 6305
/** MintIsNotInitialized: Mint must be initialized */
export const DROPSY_ERROR__MINT_IS_NOT_INITIALIZED = 0x18a2; // 6306
/** MintHasFreezeAuthority: Mint has freeze authority */
export const DROPSY_ERROR__MINT_HAS_FREEZE_AUTHORITY = 0x18a3; // 6307
/** NftNotAllowed: Fungible tokens only (no NFTs) */
export const DROPSY_ERROR__NFT_NOT_ALLOWED = 0x18a4; // 6308
/** VaultHasDelegate: Vault has delegate set */
export const DROPSY_ERROR__VAULT_HAS_DELEGATE = 0x1901; // 6401
/** VaultFrozen: Vault is frozen */
export const DROPSY_ERROR__VAULT_FROZEN = 0x1902; // 6402
/** VaultHasCloseAuthority: Vault has close authority */
export const DROPSY_ERROR__VAULT_HAS_CLOSE_AUTHORITY = 0x1903; // 6403
/** InvalidAirdropPda: Invalid vault account */
export const DROPSY_ERROR__INVALID_AIRDROP_PDA = 0x1904; // 6404
/** VaultNotInitialized: Vault not initialized */
export const DROPSY_ERROR__VAULT_NOT_INITIALIZED = 0x1905; // 6405
/** InsufficientVaultFunds: Insufficient vault funds */
export const DROPSY_ERROR__INSUFFICIENT_VAULT_FUNDS = 0x1906; // 6406
/** SourceHasDelegate: Source has delegate set */
export const DROPSY_ERROR__SOURCE_HAS_DELEGATE = 0x1932; // 6450
/** SourceAccountFrozen: Source account is frozen */
export const DROPSY_ERROR__SOURCE_ACCOUNT_FROZEN = 0x1933; // 6451
/** SourceHasCloseAuthority: Source has close authority */
export const DROPSY_ERROR__SOURCE_HAS_CLOSE_AUTHORITY = 0x1934; // 6452
/** InvalidProof: Invalid merkle proof */
export const DROPSY_ERROR__INVALID_PROOF = 0x1964; // 6500
/** AlreadyClaimed: Tokens already claimed */
export const DROPSY_ERROR__ALREADY_CLAIMED = 0x1965; // 6501
/** MissingBitmapPda: Missing bitmap PDA */
export const DROPSY_ERROR__MISSING_BITMAP_PDA = 0x1966; // 6502
/** InvalidBitmapAccount: Invalid bitmap account */
export const DROPSY_ERROR__INVALID_BITMAP_ACCOUNT = 0x1967; // 6503
/** InvalidBitmapIndex: Invalid bitmap index */
export const DROPSY_ERROR__INVALID_BITMAP_INDEX = 0x1968; // 6504
/** TooManyBitmaps: Too many bitmap accounts */
export const DROPSY_ERROR__TOO_MANY_BITMAPS = 0x1969; // 6505
/** BitmapTooLarge: Bitmap size exceeds limit */
export const DROPSY_ERROR__BITMAP_TOO_LARGE = 0x196a; // 6506
/** InvalidTotal: Invalid total claimers */
export const DROPSY_ERROR__INVALID_TOTAL = 0x196b; // 6507
/** BitmapAirdropMismatch: Bitmap/airdrop mismatch */
export const DROPSY_ERROR__BITMAP_AIRDROP_MISMATCH = 0x196c; // 6508
/** ActiveBitmapsExist: Active bitmaps exist */
export const DROPSY_ERROR__ACTIVE_BITMAPS_EXIST = 0x196d; // 6509
/** BitmapCountUnderflow: Bitmaps already closed */
export const DROPSY_ERROR__BITMAP_COUNT_UNDERFLOW = 0x196e; // 6510
/** InsufficientDeposit: Insufficient SOL deposit */
export const DROPSY_ERROR__INSUFFICIENT_DEPOSIT = 0x19c8; // 6600
/** CreateFeeTooHigh: Create fee too high (>0.05 SOL) */
export const DROPSY_ERROR__CREATE_FEE_TOO_HIGH = 0x19c9; // 6601
/** ClaimFeeTooHigh: Claim fee too high (>0.005 SOL) */
export const DROPSY_ERROR__CLAIM_FEE_TOO_HIGH = 0x19ca; // 6602
/** InsufficientFundsForFee: Insufficient funds for fee */
export const DROPSY_ERROR__INSUFFICIENT_FUNDS_FOR_FEE = 0x19cb; // 6603
/** InvalidFeeVault: Invalid fee vault */
export const DROPSY_ERROR__INVALID_FEE_VAULT = 0x19cc; // 6604
/** InvalidFeeVaultOwner: Invalid fee vault owner */
export const DROPSY_ERROR__INVALID_FEE_VAULT_OWNER = 0x19cd; // 6605
/** InvalidFeeVaultCurve: Fee vault not in curve */
export const DROPSY_ERROR__INVALID_FEE_VAULT_CURVE = 0x19ce; // 6606
/** InvalidPda: Invalid PDA account */
export const DROPSY_ERROR__INVALID_PDA = 0x1a2c; // 6700
/** InvalidAmount: Invalid amount */
export const DROPSY_ERROR__INVALID_AMOUNT = 0x1a2d; // 6701
/** Overflow: Arithmetic overflow */
export const DROPSY_ERROR__OVERFLOW = 0x1a2e; // 6702
/** VaultNotRentExempt: Vault not rent exempt */
export const DROPSY_ERROR__VAULT_NOT_RENT_EXEMPT = 0x1a2f; // 6703
/** InvalidTreasuryAccount: invalid treasury account */
export const DROPSY_ERROR__INVALID_TREASURY_ACCOUNT = 0x1a30; // 6704

export type DropsyError =
  | typeof DROPSY_ERROR__ACTIVE_BITMAPS_EXIST
  | typeof DROPSY_ERROR__AIRDROP_ENDED
  | typeof DROPSY_ERROR__AIRDROP_NOT_ENDED
  | typeof DROPSY_ERROR__AIRDROP_NOT_STARTED
  | typeof DROPSY_ERROR__ALREADY_CLAIMED
  | typeof DROPSY_ERROR__BITMAP_AIRDROP_MISMATCH
  | typeof DROPSY_ERROR__BITMAP_COUNT_UNDERFLOW
  | typeof DROPSY_ERROR__BITMAP_TOO_LARGE
  | typeof DROPSY_ERROR__CLAIM_FEE_TOO_HIGH
  | typeof DROPSY_ERROR__CONTROLLER_MISMATCH
  | typeof DROPSY_ERROR__CREATE_FEE_TOO_HIGH
  | typeof DROPSY_ERROR__DESTINATION_MINT_MISMATCH
  | typeof DROPSY_ERROR__DURATION_TOO_SHORT
  | typeof DROPSY_ERROR__INSUFFICIENT_DEPOSIT
  | typeof DROPSY_ERROR__INSUFFICIENT_FUNDS_FOR_FEE
  | typeof DROPSY_ERROR__INSUFFICIENT_VAULT_FUNDS
  | typeof DROPSY_ERROR__INVALID_AIRDROP_PDA
  | typeof DROPSY_ERROR__INVALID_AMOUNT
  | typeof DROPSY_ERROR__INVALID_BITMAP_ACCOUNT
  | typeof DROPSY_ERROR__INVALID_BITMAP_INDEX
  | typeof DROPSY_ERROR__INVALID_DESTINATION_OWNER
  | typeof DROPSY_ERROR__INVALID_END_TIME
  | typeof DROPSY_ERROR__INVALID_FEE_VAULT
  | typeof DROPSY_ERROR__INVALID_FEE_VAULT_CURVE
  | typeof DROPSY_ERROR__INVALID_FEE_VAULT_OWNER
  | typeof DROPSY_ERROR__INVALID_MINT
  | typeof DROPSY_ERROR__INVALID_MINT_OWNER
  | typeof DROPSY_ERROR__INVALID_OWNER
  | typeof DROPSY_ERROR__INVALID_PDA
  | typeof DROPSY_ERROR__INVALID_PROOF
  | typeof DROPSY_ERROR__INVALID_TOTAL
  | typeof DROPSY_ERROR__INVALID_TREASURY_ACCOUNT
  | typeof DROPSY_ERROR__INVALID_VAULT_AUTHORITY
  | typeof DROPSY_ERROR__MINT_HAS_FREEZE_AUTHORITY
  | typeof DROPSY_ERROR__MINT_IS_FROZEN
  | typeof DROPSY_ERROR__MINT_IS_NOT_INITIALIZED
  | typeof DROPSY_ERROR__MINT_MISMATCH
  | typeof DROPSY_ERROR__MISSING_BITMAP_PDA
  | typeof DROPSY_ERROR__NFT_NOT_ALLOWED
  | typeof DROPSY_ERROR__OVERFLOW
  | typeof DROPSY_ERROR__OWNER_MISMATCH
  | typeof DROPSY_ERROR__SOURCE_ACCOUNT_FROZEN
  | typeof DROPSY_ERROR__SOURCE_HAS_CLOSE_AUTHORITY
  | typeof DROPSY_ERROR__SOURCE_HAS_DELEGATE
  | typeof DROPSY_ERROR__TOO_MANY_BITMAPS
  | typeof DROPSY_ERROR__VAULT_FROZEN
  | typeof DROPSY_ERROR__VAULT_HAS_CLOSE_AUTHORITY
  | typeof DROPSY_ERROR__VAULT_HAS_DELEGATE
  | typeof DROPSY_ERROR__VAULT_MINT_MISMATCH
  | typeof DROPSY_ERROR__VAULT_NOT_INITIALIZED
  | typeof DROPSY_ERROR__VAULT_NOT_RENT_EXEMPT;

let dropsyErrorMessages: Record<DropsyError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  dropsyErrorMessages = {
    [DROPSY_ERROR__ACTIVE_BITMAPS_EXIST]: `Active bitmaps exist`,
    [DROPSY_ERROR__AIRDROP_ENDED]: `Airdrop has already ended`,
    [DROPSY_ERROR__AIRDROP_NOT_ENDED]: `Airdrop not yet ended`,
    [DROPSY_ERROR__AIRDROP_NOT_STARTED]: `Airdrop has not started yet`,
    [DROPSY_ERROR__ALREADY_CLAIMED]: `Tokens already claimed`,
    [DROPSY_ERROR__BITMAP_AIRDROP_MISMATCH]: `Bitmap/airdrop mismatch`,
    [DROPSY_ERROR__BITMAP_COUNT_UNDERFLOW]: `Bitmaps already closed`,
    [DROPSY_ERROR__BITMAP_TOO_LARGE]: `Bitmap size exceeds limit`,
    [DROPSY_ERROR__CLAIM_FEE_TOO_HIGH]: `Claim fee too high (>0.005 SOL)`,
    [DROPSY_ERROR__CONTROLLER_MISMATCH]: `Mismatched controller`,
    [DROPSY_ERROR__CREATE_FEE_TOO_HIGH]: `Create fee too high (>0.05 SOL)`,
    [DROPSY_ERROR__DESTINATION_MINT_MISMATCH]: `Destination mint doesn't match`,
    [DROPSY_ERROR__DURATION_TOO_SHORT]: `Airdrop duration must be at least 24 hours`,
    [DROPSY_ERROR__INSUFFICIENT_DEPOSIT]: `Insufficient SOL deposit`,
    [DROPSY_ERROR__INSUFFICIENT_FUNDS_FOR_FEE]: `Insufficient funds for fee`,
    [DROPSY_ERROR__INSUFFICIENT_VAULT_FUNDS]: `Insufficient vault funds`,
    [DROPSY_ERROR__INVALID_AIRDROP_PDA]: `Invalid vault account`,
    [DROPSY_ERROR__INVALID_AMOUNT]: `Invalid amount`,
    [DROPSY_ERROR__INVALID_BITMAP_ACCOUNT]: `Invalid bitmap account`,
    [DROPSY_ERROR__INVALID_BITMAP_INDEX]: `Invalid bitmap index`,
    [DROPSY_ERROR__INVALID_DESTINATION_OWNER]: `Destination account owner is not the signer`,
    [DROPSY_ERROR__INVALID_END_TIME]: `Airdrop must end at least 24 hours in the future`,
    [DROPSY_ERROR__INVALID_FEE_VAULT]: `Invalid fee vault`,
    [DROPSY_ERROR__INVALID_FEE_VAULT_CURVE]: `Fee vault not in curve`,
    [DROPSY_ERROR__INVALID_FEE_VAULT_OWNER]: `Invalid fee vault owner`,
    [DROPSY_ERROR__INVALID_MINT]: `Mint does not match stored state`,
    [DROPSY_ERROR__INVALID_MINT_OWNER]: `Invalid token program owner`,
    [DROPSY_ERROR__INVALID_OWNER]: `Transaction sender is not the owner`,
    [DROPSY_ERROR__INVALID_PDA]: `Invalid PDA account`,
    [DROPSY_ERROR__INVALID_PROOF]: `Invalid merkle proof`,
    [DROPSY_ERROR__INVALID_TOTAL]: `Invalid total claimers`,
    [DROPSY_ERROR__INVALID_TREASURY_ACCOUNT]: `invalid treasury account`,
    [DROPSY_ERROR__INVALID_VAULT_AUTHORITY]: `Invalid vault authority`,
    [DROPSY_ERROR__MINT_HAS_FREEZE_AUTHORITY]: `Mint has freeze authority`,
    [DROPSY_ERROR__MINT_IS_FROZEN]: `Mint is frozen`,
    [DROPSY_ERROR__MINT_IS_NOT_INITIALIZED]: `Mint must be initialized`,
    [DROPSY_ERROR__MINT_MISMATCH]: `Provided mint doesn't match airdrop's mint`,
    [DROPSY_ERROR__MISSING_BITMAP_PDA]: `Missing bitmap PDA`,
    [DROPSY_ERROR__NFT_NOT_ALLOWED]: `Fungible tokens only (no NFTs)`,
    [DROPSY_ERROR__OVERFLOW]: `Arithmetic overflow`,
    [DROPSY_ERROR__OWNER_MISMATCH]: `Airdrop owner mismatch`,
    [DROPSY_ERROR__SOURCE_ACCOUNT_FROZEN]: `Source account is frozen`,
    [DROPSY_ERROR__SOURCE_HAS_CLOSE_AUTHORITY]: `Source has close authority`,
    [DROPSY_ERROR__SOURCE_HAS_DELEGATE]: `Source has delegate set`,
    [DROPSY_ERROR__TOO_MANY_BITMAPS]: `Too many bitmap accounts`,
    [DROPSY_ERROR__VAULT_FROZEN]: `Vault is frozen`,
    [DROPSY_ERROR__VAULT_HAS_CLOSE_AUTHORITY]: `Vault has close authority`,
    [DROPSY_ERROR__VAULT_HAS_DELEGATE]: `Vault has delegate set`,
    [DROPSY_ERROR__VAULT_MINT_MISMATCH]: `Vault mint doesn't match airdrop mint`,
    [DROPSY_ERROR__VAULT_NOT_INITIALIZED]: `Vault not initialized`,
    [DROPSY_ERROR__VAULT_NOT_RENT_EXEMPT]: `Vault not rent exempt`,
  };
}

export function getDropsyErrorMessage(code: DropsyError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (dropsyErrorMessages as Record<DropsyError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isDropsyError<TProgramErrorCode extends DropsyError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    DROPSY_PROGRAM_ADDRESS,
    code
  );
}
