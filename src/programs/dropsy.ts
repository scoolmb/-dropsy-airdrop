/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedClaimTokensInstruction,
  type ParsedCloseAirdropInstruction,
  type ParsedCloseBitmapInstruction,
  type ParsedDepositTokensInstruction,
  type ParsedInitializeAirdropInstruction,
  type ParsedInitializeBitmapInstruction,
  type ParsedInitializeControllerInstruction,
  type ParsedInitializeMasterInstruction,
  type ParsedWithdrawControllerFeesInstruction,
} from '../instructions';

export const DROPSY_PROGRAM_ADDRESS =
  'DropmEfonJRZyPaRQbPgn4nrt3cDi5678bLbzVQRvgLp' as Address<'DropmEfonJRZyPaRQbPgn4nrt3cDi5678bLbzVQRvgLp'>;

export enum DropsyAccount {
  Airdrop,
  BitmapAccount,
  Controller,
  Master,
  Stats,
}

export function identifyDropsyAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): DropsyAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([31, 112, 159, 158, 124, 237, 9, 241])
      ),
      0
    )
  ) {
    return DropsyAccount.Airdrop;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([152, 161, 147, 85, 213, 38, 59, 48])
      ),
      0
    )
  ) {
    return DropsyAccount.BitmapAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([184, 79, 171, 0, 183, 43, 113, 110])
      ),
      0
    )
  ) {
    return DropsyAccount.Controller;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([168, 213, 193, 12, 77, 162, 58, 235])
      ),
      0
    )
  ) {
    return DropsyAccount.Master;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([190, 125, 51, 63, 169, 197, 36, 238])
      ),
      0
    )
  ) {
    return DropsyAccount.Stats;
  }
  throw new Error(
    'The provided account could not be identified as a dropsy account.'
  );
}

export enum DropsyInstruction {
  ClaimTokens,
  CloseAirdrop,
  CloseBitmap,
  DepositTokens,
  InitializeAirdrop,
  InitializeBitmap,
  InitializeController,
  InitializeMaster,
  WithdrawControllerFees,
}

export function identifyDropsyInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): DropsyInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([108, 216, 210, 231, 0, 212, 42, 64])
      ),
      0
    )
  ) {
    return DropsyInstruction.ClaimTokens;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([85, 138, 99, 129, 104, 203, 94, 4])
      ),
      0
    )
  ) {
    return DropsyInstruction.CloseAirdrop;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([59, 123, 115, 204, 163, 227, 37, 118])
      ),
      0
    )
  ) {
    return DropsyInstruction.CloseBitmap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([176, 83, 229, 18, 191, 143, 176, 150])
      ),
      0
    )
  ) {
    return DropsyInstruction.DepositTokens;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([96, 196, 74, 102, 61, 195, 48, 184])
      ),
      0
    )
  ) {
    return DropsyInstruction.InitializeAirdrop;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([25, 109, 200, 45, 209, 118, 74, 69])
      ),
      0
    )
  ) {
    return DropsyInstruction.InitializeBitmap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([137, 255, 100, 190, 201, 247, 241, 81])
      ),
      0
    )
  ) {
    return DropsyInstruction.InitializeController;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([206, 91, 246, 30, 216, 101, 134, 166])
      ),
      0
    )
  ) {
    return DropsyInstruction.InitializeMaster;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([252, 199, 14, 46, 100, 156, 176, 230])
      ),
      0
    )
  ) {
    return DropsyInstruction.WithdrawControllerFees;
  }
  throw new Error(
    'The provided instruction could not be identified as a dropsy instruction.'
  );
}

export type ParsedDropsyInstruction<
  TProgram extends string = 'DropmEfonJRZyPaRQbPgn4nrt3cDi5678bLbzVQRvgLp',
> =
  | ({
      instructionType: DropsyInstruction.ClaimTokens;
    } & ParsedClaimTokensInstruction<TProgram>)
  | ({
      instructionType: DropsyInstruction.CloseAirdrop;
    } & ParsedCloseAirdropInstruction<TProgram>)
  | ({
      instructionType: DropsyInstruction.CloseBitmap;
    } & ParsedCloseBitmapInstruction<TProgram>)
  | ({
      instructionType: DropsyInstruction.DepositTokens;
    } & ParsedDepositTokensInstruction<TProgram>)
  | ({
      instructionType: DropsyInstruction.InitializeAirdrop;
    } & ParsedInitializeAirdropInstruction<TProgram>)
  | ({
      instructionType: DropsyInstruction.InitializeBitmap;
    } & ParsedInitializeBitmapInstruction<TProgram>)
  | ({
      instructionType: DropsyInstruction.InitializeController;
    } & ParsedInitializeControllerInstruction<TProgram>)
  | ({
      instructionType: DropsyInstruction.InitializeMaster;
    } & ParsedInitializeMasterInstruction<TProgram>)
  | ({
      instructionType: DropsyInstruction.WithdrawControllerFees;
    } & ParsedWithdrawControllerFeesInstruction<TProgram>);
